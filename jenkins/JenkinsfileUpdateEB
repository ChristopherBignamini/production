#!/usr/bin/env groovy

def methods
def machinesList
/*
 Initialization: checkout the production repository to load the files:
 - "util.groovy" with the functions used in the pipeline scripts
 - "Machines.groovy" with the list and properties of HPC systems
*/
stage('Initialization') {
    node('master') {
        checkout scm
        methods = load("$WORKSPACE/jenkins/util.groovy")
        machinesList = load("$WORKSPACE/jenkins/Machines.groovy")
    }
}

/*
 Machine Selection:
 - filters the user defined parameter "machines", accessible though "params.machines"
 - defines the runtime HPC systems of the project "machinesToRun"
 - defines the configuration of the runtime HPC systems "machinesConfiguration"
*/
def machineConfigurations = []
stage('Machine Selection') {
    node('master') {
        def machinesToRun = machinesList.findAll({methods.machineCheck(params.machines, it.name)})
        if (!machinesToRun) {
            println "No machines were specified. Aborting...."
            currentBuild.result = "FAILURE"
            return
        }
        for (system in machinesToRun) {
            machineConfigurations.add(
                [machine:system, architectures: methods.getMachineConfiguration(
                        params.machines, system.name, system.archs as String[])])
        }
    }
}

/*
 Build Stage: configures parallel builds for the different "machinesToRun"
 Loop over all systems in "machineConfigurations":
  - if the machine has multiple architectures, starts a sub-loop over architectures
  - the user parameter "eb_prefix" is prepended to the variable EASYBUILD_PREFIX
  - EBVERSIONEASYBUILD stores the version of EasyBuild ("params.eb_version")
  - the target CDT version is selected by the user and stored in "params.cdt_version"
*/
def updates = [:]
def toolchains = "CrayCCE CrayGNU CrayIntel CrayPGI"
stage('Update Stage') {
    for (system in machineConfigurations) {
        def machine = system.machine
        def architectures = system.architectures
        def machineName = machine.name
        for (item in architectures) {
            /* define architecture and machineLabel
               to use them in parallel builds */
            def architecture = item
            def machineLabel = architecture == "" ?
               machineName :
               "$machineName-$architecture"
            updates["$machineLabel"] = {
                node(machineName) {
                    checkout scm

                    /* define command to load EasyBuild */
                    def load_easybuild = architecture == "" ?
                        "module load cdt/${params.cdt_version} EasyBuild-custom/cscs" :
                        "module load cdt/${params.cdt_version} daint-$architecture EasyBuild-custom/cscs"

                    /* define command to switch EasyBuild version*/
                    def switch_easybuild = params.eb_version == "" ?
                        "" :
                        "module switch EasyBuild EasyBuild/${params.eb_version}"

                    /* define list of unuse paths */
                    def unuse_paths = architecture == '' ?
                        machine.unusePath.replace(':', ' ') :
                        machine.unusePath.replace(':', ' ').replace('ARCH', architecture)
                        println("List of unuse paths: $unuse_paths")

                    /* define eb_flags and command to build software */
                    def eb_flags = "--ignore-locks -r"
                    def tc_flags = "--try-toolchain-version=${params.cdt_version}"
                    //def build_command = architecture == "" ?
                        //"srun -u -J $env.JOB_BASE_NAME --account=${params.account} -t 06:00:00 eb $eb_flags" :
                        //"srun -u -C $architecture -J $env.JOB_BASE_NAME --account=${params.account} -t 06:00:00 eb $eb_flags"
                    def build_command = "eb $eb_flags"
                        
                    /* create the new toolchains and build the software stack */
                    sh("""#!/bin/bash -l
                        export EASYBUILD_PREFIX="${params.eb_prefix}/$machineLabel/${params.cdt_version}"
                        export EASYBUILD_TMPDIR="\$EASYBUILD_PREFIX/tmp"
                        export EASYBUILD_BUILDPATH="/tmp/$env.BUILD_TAG"
                        export EB_CUSTOM_REPOSITORY="$WORKSPACE/easybuild"
                        $load_easybuild
                        $switch_easybuild
                        for path in $unuse_paths; do
                            module unuse \$path
                        done
                        echo -e "\nMODULEPATH: \$MODULEPATH\n"
                        export EASYBUILD_EXTERNAL_MODULES_METADATA="$WORKSPACE/easybuild/cray_external_modules_metadata-${params.cdt_version}.cfg"

                        # print EasyBuild version and configuration
                        eb --version
                        eb --show-config

                        # create the new toolchains
                        for tc in $toolchains; do
                            echo "Current toolchain: \$tc"
                            find \$EB_CUSTOM_REPOSITORY -type f -name \${tc}-${params.cdt_current}.eb -exec sed "s/${params.cdt_current}/${params.cdt_version}/" {} \\; > \$EB_CUSTOM_REPOSITORY/easyconfigs/c/\$tc/\${tc}-${params.cdt_version}.eb
                        done

                        # initialise counters and lists
                        submit_file=\${EASYBUILD_PREFIX}/submit.txt"
                        echo "" > \${submit_file}
                        unset success
                        success_file="\${EASYBUILD_PREFIX}/success.txt"
                        echo "" > \${success_file}
                        unset failed
                        failed_file="\${EASYBUILD_PREFIX}/failed.txt"
                        echo "" > \${failed_file}

                        # filter the target production list $machineLabel
                        echo ${params.select_recipes} | tr " ," "\n" > select_recipes.txt
                        echo ${params.discard_recipes} | tr " ," "\n" > discard_recipes.txt
                        build_list=\$(grep -if select_recipes.txt $WORKSPACE/jenkins-builds/$machineLabel | grep -ivf discard_recipes.txt | awk '{print \$1}')
                        
                        if [ -z "\$build_list" ]; then
                            echo -e "\nThe list of recipes to build is empty. Exiting..."
                            exit \$(wc -w <<< \$build_list)
                        else   
                            echo -e "\nSelected recipes to build: \n\$build_list" | sed -E 's/(Cray.+)-${params.cdt_current}/\\1-${params.cdt_version}/'
                        fi

                        # build recipes
                        for recipe in \${build_list}; do
                            status=0
                            new_recipe=\$(echo \$recipe | sed -E 's/(Cray[a-zA-Z]+)-${params.cdt_current}/\\1-${params.cdt_version}/')
                            echo -e "\nCurrent Update: \$new_recipe"

                            # get dependencies from dry run
                            deps=\$($build_command $tc_flags -D \$recipe | awk '/\\.eb/{print gensub(/.*\\/(.*\\.eb).*/,"\\\\1",1)}')

                            # check status of dry run
                            if [ -n "\$deps" ]; then
                                $build_command $tc_flags -D \$recipe | grep "\\["
                            else
                                failed+=(\$new_recipe)
                                echo "\$new_recipe" >> "\${failed_file}"
                                echo -e "\nDry run of \$new_recipe FAILED: skipping build"
                                continue
                            fi

                            echo -e "\nSubmitting job and building..."
                            if [[ \$recipe =~ Cray[a-zA-Z]+-${params.cdt_current} ]]; then
                                $build_command $tc_flags \$recipe
                            else
                                $build_command \$recipe
                            fi
                            status=\$[status+\$?]

                            # keep track of successful and failed builds
                            folder=\$(find . -name \$recipe | xargs dirname)
                            if [ \$status -eq 0 ]; then
                                success+=(\$new_recipe)
                                echo "\$folder/\$new_recipe" >> "\${success_file}"
                                echo "\$deps" | tr ' ' '\n' >> "\${submit_file}"
                                echo -e "\nBuild of \$new_recipe from \$recipe SUCCESSFUL(\${#success[@]})"
                            else
                                failed+=(\$new_recipe)
                                echo "\$folder/\$new_recipe" >> "\${failed_file}"
                                echo -e "\nBuild of \$new_recipe from \$recipe FAILED(\${#failed[@]})"
                            fi
                        done

                        # change permission of tmp folders if failed is not null
                        if [ -n "\$failed" ]; then
                            chmod -R o+r "\${EASYBUILD_TMPDIR}"
                            find "\${EASYBUILD_TMPDIR}" -type d -exec chmod o+x '{}' \\;
                        fi

                        # print successful and failed updates
                        echo -e "\nSuccessful Updates: \${#success[@]} \n\${success[@]}"
                        echo -e "\nFailed Updates: \${#failed[@]} \n\${failed[@]}"

                        # return the number of failed updates
                        exit \${#failed[@]}
                    """)
                }
            }
        }
    }

    try {
        parallel updates
        currentBuild.result = "SUCCESS"
    } catch(err) {
        if (err.toString().contains('exit code 143')) {
            currentBuild.result = "ABORTED"
            println "The Build step was cancelled. Aborting..."
        }
        else if (err.toString().contains('Queue task was cancelled')) {
            currentBuild.result = "ABORTED"
            println "The Queue task was cancelled. Aborting..."
        }
        else {
            currentBuild.result = "FAILURE"
            println "The Build step failed. Exiting..."
        }
    }
}

/*
 Jira Stage: create Jira issues for failed updates on the different "machinesLabel"
 Loop over all systems in "machineConfigurations":
  - retrieve EASYBUILD_PREFIX path "${params.eb_prefix}/$machineLabel/${params.cdt_version}"
  - loop over the lines of the file "failed.txt" (list of failed updates)
  - create a Jira Issue for each item in the list with the proper project key
*/
JiraIssues = [:]
stage('Jira Stage') {
    for (system in machineConfigurations) {
        def machine = system.machine
        def architectures = system.architectures
        def machineName = machine.name
        for (item in architectures) {
            def architecture = item
            def machineLabel = architecture == "" ? 
                machineName : 
                "${machineName}-${architecture}"
            JiraIssues[machineLabel] = {
                node(machineName) {
                    /* retrieve list of failed updates */
                    def failed_updates = sh(returnStdout: true,
                                        script: """#!/bin/bash -l
                                        failed_file="${params.eb_prefix}/$machineLabel/${params.cdt_version}/failed.txt"
                                        if [ -f "\$failed_file" ]; then
                                             cat \$failed_file
                                        else
                                             echo "None"
                                        fi""").trim()  
                    if ( failed_builds.equals( "None" ) ) {
                        println "\nFailed updates: $failed_updates\n"
                    }
                    else {
                        assert failed_builds.tokenize(' \n').each {
                            try {
                                methods.failedJiraTask("UES", it, machineLabel)
                            } catch(err) {
                                println "Failed to create Jira Issue for $it"
                            }
                       }
                    }
                }
            }
        }
    }

    if (params.notifyJira) {
        try {
            parallel JiraIssues
        } catch(err) {
            println "Failed to create Jira Issues"
        }
    }  
}

if (params.notifySlack) {
    methods.notifySlackFinish()
}

